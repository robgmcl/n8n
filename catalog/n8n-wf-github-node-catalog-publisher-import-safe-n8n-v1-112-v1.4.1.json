
{
  "name": "Catalog: Publish n8n Built-in Node Names → GitHub (HTTP, ref=release/1.112.6)",
  "nodes": [
    {
      "parameters": {},
      "id": "ManualTrigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [160, 240]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            { "name": "owner", "value": "your-org-or-user" },
            { "name": "repo", "value": "your-repo" },
            { "name": "branch", "value": "main" },
            { "name": "jsonPath", "value": "catalog/n8n_nodes_summary.json" },
            { "name": "csvPath", "value": "catalog/n8n_nodes_summary.csv" },
            { "name": "commitMessage", "value": "chore: update n8n built-in node catalog" },
            { "name": "sourceRef", "value": "release/1.112.6" }
          ],
          "boolean": [
            { "name": "use_latest_tag", "value": false }
          ]
        }
      },
      "id": "Set_Config",
      "name": "Set: Config",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [380, 240]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            { "value1": "={{ $json.use_latest_tag === true }}" }
          ]
        }
      },
      "id": "IF_UseLatest",
      "name": "IF: use_latest_tag?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [600, 240]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "GET",
        "url": "https://api.github.com/repos/n8n-io/n8n/releases/latest",
        "responseFormat": "json",
        "jsonParameters": false,
        "options": {
          "headerParametersUi": {
            "parameter": [
              { "name": "User-Agent", "value": "n8n-workflow" },
              { "name": "Accept", "value": "application/vnd.github+json" },
              { "name": "Authorization", "value": "={{ $env.GITHUB_TOKEN ? 'Bearer ' + $env.GITHUB_TOKEN : undefined }}" }
            ]
          }
        }
      },
      "id": "HTTP_LatestRelease",
      "name": "HTTP: GitHub latest release",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [840, 140]
    },
    {
      "parameters": {
        "jsCode": "const tag = $json.tag_name || null; return [{ json: { ref_effective: tag || '' } }];"
      },
      "id": "Code_ExtractTag",
      "name": "Code: extract tag → ref_effective",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1080, 140]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            { "name": "ref_effective", "value": "={{ $json.sourceRef || '' }}" }
          ]
        }
      },
      "id": "Set_RefFromConfig",
      "name": "Set: ref_effective from sourceRef",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [840, 340]
    },
    {
      "parameters": {
        "mode": "append"
      },
      "id": "Merge_Ref",
      "name": "Merge: effective ref",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [1280, 240]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "GET",
        "url": "={{ 'https://api.github.com/repos/n8n-io/n8n/contents/packages/nodes-base/nodes' + ($json.ref_effective ? ('?ref=' + $json.ref_effective) : '') }}",
        "responseFormat": "json",
        "jsonParameters": false,
        "options": {
          "splitIntoItems": true,
          "headerParametersUi": {
            "parameter": [
              { "name": "User-Agent", "value": "n8n-workflow" },
              { "name": "Accept", "value": "application/vnd.github+json" },
              { "name": "Authorization", "value": "={{ $env.GITHUB_TOKEN ? 'Bearer ' + $env.GITHUB_TOKEN : undefined }}" }
            ]
          }
        }
      },
      "id": "HTTP_ListNodes",
      "name": "HTTP: GitHub list nodes (dir)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1520, 240]
    },
    {
      "parameters": {
        "jsCode": "// Input: one item per entry. Keep only directories. Build JSON+CSV + base64.\\nconst items = $input.all();\\nconst dirs = items.filter(i => i.json && i.json.type === 'dir');\\nconst names = dirs.map(i => String(i.json.name)).sort((a,b)=>a.localeCompare(b));\\n\\nconst cfg = $node['Set: Config'].json || {};\\nconst refNode = $node['Merge: effective ref'] && $node['Merge: effective ref'].json ? $node['Merge: effective ref'].json : {};\\nconst ref = refNode.ref_effective || '';\\n\\nconst catalog = {\\n  updatedAt: new Date().toISOString(),\\n  versionRef: ref || null,\\n  sourceRepo: 'n8n-io/n8n',\\n  sourcePath: 'packages/nodes-base/nodes',\\n  count: names.length,\\n  nodes: names\\n};\\n\\nconst jsonText = JSON.stringify(catalog, null, 2);\\nconst csvText = 'node\\n' + names.map(n => '\"' + n.replace(/\"/g, '\"\"') + '\"').join('\\n');\\nconst base64Json = Buffer.from(jsonText, 'utf8').toString('base64');\\nconst base64Csv = Buffer.from(csvText, 'utf8').toString('base64');\\n\\nreturn [{ json: { ...cfg, ref_effective: ref, names, jsonText, csvText, base64Json, base64Csv } }];"
      },
      "id": "Code_PrepareFiles",
      "name": "Code: build JSON+CSV (base64)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1760, 240]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "GET",
        "url": "={{ 'https://api.github.com/repos/' + $json.owner + '/' + $json.repo + '/contents/' + $json.jsonPath + '?ref=' + $json.branch }}",
        "responseFormat": "json",
        "jsonParameters": false,
        "options": {
          "ignoreResponseCode": true,
          "headerParametersUi": {
            "parameter": [
              { "name": "User-Agent", "value": "n8n-workflow" },
              { "name": "Accept", "value": "application/vnd.github+json" },
              { "name": "Authorization", "value": "={{ $env.GITHUB_TOKEN ? 'Bearer ' + $env.GITHUB_TOKEN : undefined }}" }
            ]
          }
        }
      },
      "id": "HTTP_GetJsonSha",
      "name": "HTTP: get existing JSON sha",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2000, 160]
    },
    {
      "parameters": {
        "jsCode": "const r = $input.item.json; const sha = r && r.sha ? r.sha : null; return [{ json: { ...$json, shaJson: sha } }];"
      },
      "id": "Code_ExtractShaJson",
      "name": "Code: extract sha (json)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2240, 160]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "PUT",
        "url": "={{ 'https://api.github.com/repos/' + $json.owner + '/' + $json.repo + '/contents/' + $json.jsonPath }}",
        "responseFormat": "json",
        "jsonParameters": true,
        "options": {
          "headerParametersUi": {
            "parameter": [
              { "name": "User-Agent", "value": "n8n-workflow" },
              { "name": "Accept", "value": "application/vnd.github+json" },
              { "name": "Authorization", "value": "={{ $env.GITHUB_TOKEN ? 'Bearer ' + $env.GITHUB_TOKEN : undefined }}" }
            ]
          }
        },
        "bodyParametersJson": "={\n  \"message\": $json.commitMessage,\n  \"content\": $json.base64Json,\n  \"branch\": $json.branch,\n  \"sha\": $json.shaJson || undefined\n}"
      },
      "id": "HTTP_PutJson",
      "name": "HTTP: put JSON file",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2480, 160]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "GET",
        "url": "={{ 'https://api.github.com/repos/' + $json.owner + '/' + $json.repo + '/contents/' + $json.csvPath + '?ref=' + $json.branch }}",
        "responseFormat": "json",
        "jsonParameters": false,
        "options": {
          "ignoreResponseCode": true,
          "headerParametersUi": {
            "parameter": [
              { "name": "User-Agent", "value": "n8n-workflow" },
              { "name": "Accept", "value": "application/vnd.github+json" },
              { "name": "Authorization", "value": "={{ $env.GITHUB_TOKEN ? 'Bearer ' + $env.GITHUB_TOKEN : undefined }}" }
            ]
          }
        }
      },
      "id": "HTTP_GetCsvSha",
      "name": "HTTP: get existing CSV sha",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2000, 320]
    },
    {
      "parameters": {
        "jsCode": "const r = $input.item.json; const sha = r && r.sha ? r.sha : null; return [{ json: { ...$json, shaCsv: sha } }];"
      },
      "id": "Code_ExtractShaCsv",
      "name": "Code: extract sha (csv)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2240, 320]
    },
    {
      "parameters": {
        "authentication": "none",
        "requestMethod": "PUT",
        "url": "={{ 'https://api.github.com/repos/' + $json.owner + '/' + $json.repo + '/contents/' + $json.csvPath }}",
        "responseFormat": "json",
        "jsonParameters": true,
        "options": {
          "headerParametersUi": {
            "parameter": [
              { "name": "User-Agent", "value": "n8n-workflow" },
              { "name": "Accept", "value": "application/vnd.github+json" },
              { "name": "Authorization", "value": "={{ $env.GITHUB_TOKEN ? 'Bearer ' + $env.GITHUB_TOKEN : undefined }}" }
            ]
          }
        },
        "bodyParametersJson": "={\n  \"message\": $json.commitMessage,\n  \"content\": $json.base64Csv,\n  \"branch\": $json.branch,\n  \"sha\": $json.shaCsv || undefined\n}"
      },
      "id": "HTTP_PutCsv",
      "name": "HTTP: put CSV file",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2480, 320]
    },
    {
      "parameters": {
        "notes": "PURPOSE\\nPublish a catalog of n8n built-in node folder names from the n8n monorepo to **your** GitHub repo as JSON + CSV.\\n\\nREF NOTES\\n- This version pins to **release/1.112.6** (GitHub branch) by default to match your Cloud version.\\n- If you want the latest tag instead, set `use_latest_tag = true` in **Set: Config**.\\n\\nSETUP\\n1) Add env var **GITHUB_TOKEN** in n8n (Contents: Read & write on target repo).\\n2) Edit **Set: Config**: owner/repo/branch, jsonPath, csvPath.\\n\\nRUN\\n- Execute Workflow → it uses the effective ref → lists node folders → builds JSON+CSV → commits both files."
      },
      "id": "Sticky",
      "name": "Sticky Note — Read me",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [160, 100]
    }
  ],
  "connections": {
    "Manual Trigger": { "main": [[{ "node": "Set: Config", "type": "main", "index": 0 }]] },
    "Set: Config": { "main": [[{ "node": "IF: use_latest_tag?", "type": "main", "index": 0 }]] },
    "IF: use_latest_tag?": {
      "main": [
        [{ "node": "HTTP: GitHub latest release", "type": "main", "index": 0 }],
        [{ "node": "Set: ref_effective from sourceRef", "type": "main", "index": 0 }]
      ]
    },
    "HTTP: GitHub latest release": { "main": [[{ "node": "Code: extract tag → ref_effective", "type": "main", "index": 0 }]] },
    "Code: extract tag → ref_effective": { "main": [[{ "node": "Merge: effective ref", "type": "main", "index": 0 }]] },
    "Set: ref_effective from sourceRef": { "main": [[{ "node": "Merge: effective ref", "type": "main", "index": 0 }]] },
    "Merge: effective ref": { "main": [[{ "node": "HTTP: GitHub list nodes (dir)", "type": "main", "index": 0 }]] },
    "HTTP: GitHub list nodes (dir)": { "main": [[{ "node": "Code: build JSON+CSV (base64)", "type": "main", "index": 0 }]] },
    "Code: build JSON+CSV (base64)": {
      "main": [
        [{ "node": "HTTP: get existing JSON sha", "type": "main", "index": 0 }],
        [{ "node": "HTTP: get existing CSV sha", "type": "main", "index": 0 }]
      ]
    },
    "HTTP: get existing JSON sha": { "main": [[{ "node": "Code: extract sha (json)", "type": "main", "index": 0 }]] },
    "Code: extract sha (json)": { "main": [[{ "node": "HTTP: put JSON file", "type": "main", "index": 0 }]] },
    "HTTP: get existing CSV sha": { "main": [[{ "node": "Code: extract sha (csv)", "type": "main", "index": 0 }]] },
    "Code: extract sha (csv)": { "main": [[{ "node": "HTTP: put CSV file", "type": "main", "index": 0 }]] }
  },
  "active": false,
  "settings": { "executionOrder": "v1" },
  "pinData": {},
  "tags": [{ "name": "catalog" }, { "name": "github" }]
}
